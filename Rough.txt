# **üì° Bluetooth Sniffer & Spoofing Detector using Arduino Uno**  

This project **detects nearby Bluetooth devices** and identifies **potential spoofing attempts** using an **HC-05 Bluetooth module** with an **Arduino Uno**. If suspicious activity is detected (e.g., unknown MAC addresses or device names), the system **triggers an alarm** using an LED and buzzer.  

---

## **üõ†Ô∏è Components Required**
| Component            | Quantity | Description |
|----------------------|----------|------------|
| **Arduino Uno**      | 1 | Main microcontroller |
| **HC-05 Bluetooth Module** | 1 | Scans for nearby Bluetooth devices |
| **Buzzer**          | 1 | Sounds an alarm when spoofing is detected |
| **LED**             | 1 | Indicates alert when a suspicious device is detected |
| **Resistors (1KŒ©, 2KŒ©)** | 2 | Voltage divider for HC-05 RX pin |
| **Push Button (optional)** | 1 | Manually resets the alert |
| **Breadboard & Jumper Wires** | - | For connections |

---

## **‚ö° Circuit Wiring**
### **1Ô∏è‚É£ HC-05 to Arduino**
| HC-05 Pin | Arduino Pin | Notes |
|-----------|------------|-------|
| **VCC** | **5V** | Power supply |
| **GND** | **GND** | Common ground |
| **TX** | **Pin 2 (Arduino RX via 1KŒ© Resistor)** | Data transmission |
| **RX** | **Pin 3 (Arduino TX via 2KŒ© + 1KŒ© Voltage Divider)** | Arduino TX needs lower voltage |

### **2Ô∏è‚É£ Buzzer & LED**
| Component | Arduino Pin | Connection |
|-----------|------------|------------|
| **Buzzer** | **6** | Active buzzer |
| **LED** | **7** | Alert indicator |

---

## **üöÄ Final Code: Bluetooth Sniffer & Spoofing Detector**
```cpp
#include <SoftwareSerial.h>

SoftwareSerial BTSerial(2, 3); // RX (2), TX (3) for HC-05

#define BUZZER 6  // Buzzer at pin 6
#define LED 7     // LED at pin 7

void setup() {
    Serial.begin(9600);  
    BTSerial.begin(9600);  

    pinMode(BUZZER, OUTPUT);
    pinMode(LED, OUTPUT);

    digitalWrite(BUZZER, LOW);
    digitalWrite(LED, LOW);

    Serial.println("üîç Bluetooth Sniffer & Spoofing Detector Starting...");
}

void loop() {
    if (BTSerial.available()) {
        Serial.print("üì° Received: ");
        
        String data = "";
        while (BTSerial.available()) {
            char c = BTSerial.read();
            Serial.write(c); // Print raw received data
            data += c;
        }
        Serial.println();

        Serial.println("üîç Data Processed: " + data);

        // Check for suspicious devices
        if (data.indexOf("UNKNOWN") != -1 || data.indexOf("Fake_MAC") != -1) {
            Serial.println("üö® Spoofing Detected! Activating Alarm...");
            triggerAlert();
        }
    } else {
        Serial.println("‚ö†Ô∏è No data from Bluetooth module.");
    }
    delay(2000);
}

// üîî Trigger LED & Buzzer Alert
void triggerAlert() {
    for (int i = 0; i < 3; i++) {
        digitalWrite(BUZZER, HIGH);
        digitalWrite(LED, HIGH);
        delay(500);
        digitalWrite(BUZZER, LOW);
        digitalWrite(LED, LOW);
        delay(500);
    }
}
```
---

## **üß™ Testing the Project**
### **Step 1: Upload the Code**
1. Connect **Arduino Uno** to your PC.
2. Open **Arduino IDE** and set **Board: Arduino Uno**.
3. Select the correct **COM port**.
4. Click **Upload**.

### **Step 2: Check Serial Monitor**
1. Open **Serial Monitor** (set baud rate to **9600**).
2. If properly connected, you should see:
   ```
   üîç Bluetooth Sniffer & Spoofing Detector Starting...
   ‚ö†Ô∏è No data from Bluetooth module.
   ```

### **Step 3: Pair HC-05 with a Phone**
1. Turn on **Bluetooth on your phone**.
2. Pair with **HC-05 (Default PIN: 1234 or 0000)**.
3. Use a **Bluetooth Terminal App** to send messages to Arduino.

### **Step 4: Simulate Spoofing**
1. Send messages like:
   - `"Device_MAC:00:11:22:33:44:55"` (Normal)
   - `"UNKNOWN_DEVICE"` or `"Fake_MAC:12:34:56:78:9A:BC"` (Spoofing)
2. If **spoofing is detected**, the **LED and buzzer activate**.

---

## **üõ†Ô∏è Debugging & Fixes**
### **1Ô∏è‚É£ No Data from HC-05?**
- **Check Baud Rate**: Try changing `BTSerial.begin(9600);` to `BTSerial.begin(38400);`.
- **Ensure HC-05 is in Data Mode** (LED blinking **slowly** means connected).
- **Swap RX/TX Connections** if data isn't received.

### **2Ô∏è‚É£ Buzzer or LED Not Working?**
- Ensure correct **pin numbers** in `#define BUZZER 6` and `#define LED 7`.
- Check if **buzzer and LED are connected properly**.

### **3Ô∏è‚É£ How to Check if HC-05 is Sending Data?**
Modify this debug snippet inside `loop()`:
```cpp
if (BTSerial.available()) {
    Serial.print("üì° Debug Data: ");
    while (BTSerial.available()) {
        Serial.write(BTSerial.read());
    }
    Serial.println();
}
```
If nothing prints, **your HC-05 isn‚Äôt sending data.**

---

## **üìå Real-World Use Cases**
üîπ **Cybersecurity Analysis**: Detect unauthorized Bluetooth connections.  
üîπ **Network Security Research**: Test Bluetooth spoofing defenses.  
üîπ **IoT Device Security**: Monitor unauthorized Bluetooth activity in secured environments.  
üîπ **Pentesting & Red Teaming**: Identify rogue Bluetooth devices during security audits.  

---

## **üéØ Summary**
‚úÖ **Scans Bluetooth devices** and detects **suspicious activity**.  
‚úÖ **Triggers an alarm** using a **buzzer and LED** when a fake device is detected.  
‚úÖ **Tested with HC-05 Bluetooth module** and **Bluetooth terminal apps**.  
‚úÖ **Debugging features added** to ensure reliability.  

---

üöÄ This is the **final optimized version** of the **Bluetooth Sniffer & Spoofing Detector** project. Let me know if you need any improvements! üî•
